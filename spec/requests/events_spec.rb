require 'rails_helper'
require 'faker'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/events', type: :request do
  before do
    Rails.application.env_config["devise.mapping"] = Devise.mappings[:user] # If using Devise
    Rails.application.env_config["omniauth.auth"] = OmniAuth.config.mock_auth[:google_oauth2]
    get user_google_oauth2_omniauth_authorize_path
    get user_google_oauth2_omniauth_callback_url
  end

  # This should return the minimal set of attributes required to create a valid
  # Event. As you add validations to Event, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    #skip('Add a hash of attributes valid for your model')
    {
      event_id: Faker::Number.number(digits: 6),
      event_name: Faker::ChuckNorris.fact,
      event_type: "",
      event_date: Faker::Date.forward(days: 99),
      description: Faker::ChuckNorris.fact,
      event_creator: Faker::Number.number(digits: 6),
      virtual: false,
      password: Faker::Internet.password,
      meeting_link: Faker::Internet.url,
      signin_time: nil,
      point_val: Faker::Number.number(digits: 3),
      graphics: Faker::Internet.url,
      total_event_hr: Faker::Number.decimal(l_digits: 2)
    }
  end

  let(:invalid_attributes) do
    #skip('Add a hash of attributes invalid for your model')
    {
      event_id: nil,
      event_name: nil,
      event_type: nil,
      event_date: nil,
      description: nil,
      event_creator: nil,
      virtual: nil,
      password: nil,
      meeting_link: nil,
      signin_time: nil,
      point_val: nil,
      graphics: nil,
      total_event_hr: nil
    }
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Event.create! valid_attributes
      get events_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      event = Event.create! valid_attributes
      get event_url(event)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_event_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      event = Event.create! valid_attributes
      get edit_event_url(event)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Event' do
        expect do
          post events_url, params: { event: valid_attributes }
          #raise response.body
        end.to change(Event, :count).by(1)
      end

      it 'redirects to the created event' do
        post events_url, params: { event: valid_attributes }
        expect(response).to redirect_to(event_url(Event.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Event' do
        expect do
          post events_url, params: { event: invalid_attributes }
        end.to change(Event, :count).by(0)
      end

    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        #skip('Add a hash of attributes valid for your model')
        {
          event_id: Faker::Number.number(digits: 6),
          event_name: Faker::ChuckNorris.fact,
          event_type: "",
          event_date: Faker::Date.forward(days: 99),
          description: Faker::ChuckNorris.fact,
          event_creator: Faker::Number.number(digits: 6),
          virtual: false,
          password: Faker::Internet.password,
          meeting_link: Faker::Internet.url,
          signin_time: nil,
          point_val: Faker::Number.number(digits: 3),
          graphics: Faker::Internet.url,
          total_event_hr: Faker::Number.decimal(l_digits: 2)
        }
      end

      it 'updates the requested event' do
        event = Event.create! valid_attributes
        patch event_url(event), params: { event: new_attributes }, as: :json
        event.reload
        #skip('Add assertions for updated state')
        expect(response.body).to include(new_attributes[:event_id].to_s)
        expect(response.body).to include(new_attributes[:event_name].to_s)
        expect(response.body).to include(new_attributes[:meeting_link].to_s)
        expect(response.body).to include(new_attributes[:point_val].to_s)
      end

    end

    context 'with invalid parameters' do
      it "does not update requested event" do
        event = Event.create! valid_attributes
        patch event_url(event), params: { event: invalid_attributes }, as: :json
        expect(response).not_to be_successful
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested event' do
      event = Event.create! valid_attributes
      expect do
        delete event_url(event)
      end.to change(Event, :count).by(-1)
    end

    it 'redirects to the events list' do
      event = Event.create! valid_attributes
      delete event_url(event)
      expect(response).to redirect_to(events_url)
    end
  end
end
